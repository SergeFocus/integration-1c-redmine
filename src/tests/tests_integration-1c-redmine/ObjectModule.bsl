Перем КонтекстЯдра;
Перем Утверждения;
Перем Ожидаем;

Перем мНастройки;
Перем ОбработкаОбъект;


//{ основная процедура для юнит-тестирования xUnitFor1C
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
    КонтекстЯдра = КонтекстЯдраПараметр;
    Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьЭкспортныеПеременные");
	
	НаборТестов.НачатьГруппу("Подключение к трекеру и проверка методов Rest API", Истина);
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьНастройкиПодключения");
	НаборТестов.Добавить("ТестДолжен_ЗаполнитьНастройкиПодключенияКТрекеруТестовымиЗначениями");
	НаборТестов.Добавить("ТестДолжен_ПройтиИнициализациюПараметровОбработки");
	НаборТестов.Добавить("ТестДолжен_ПолучитьИзТрекераСписокНастраиваемыхПолей");
	НаборТестов.Добавить("ТестДолжен_ПолучитьИзТрекераСписокПроектов");
	НаборТестов.Добавить("ТестДолжен_ПолучитьИзТрекераСписокИсполнителей");
	НаборТестов.Добавить("ТестДолжен_СоздатьЗадачуВТрекере");
	НаборТестов.Добавить("ТестДолжен_ПолучитьСписокЗадач");
	НаборТестов.Добавить("ТестДолжен_УдалитьЗадачуИзТрекера");
	
	//НаборТестов.Добавить("ТестДолжен_СложитьДваИДва");
КонецПроцедуры

//}

//{ Блок юнит-тестов

Процедура ПередЗапускомТеста() Экспорт
    //НачатьТранзакцию();
	
	ПутьКОбработке = СтрЗаменить(ЭтотОбъект.ИспользуемоеИмяФайла, "tests\tests_", "");
	ОбработкаОбъект = ВнешниеОбработки.Создать(ПутьКОбработке);
	
	ИмяФайлаНастроек = СтрЗаменить(ЭтотОбъект.ИспользуемоеИмяФайла, "tests_integration-1c-redmine.epf", "settings.json");
	ФайлНастроек = Новый Файл(ИмяФайлаНастроек);
	Утверждения.ПроверитьИстину(ФайлНастроек.Существует(), "В каталоге ./test не обнаружен файл с настройками settings.json!");
	
	СтрокаJSON = Новый ТекстовыйДокумент;
	СтрокаJSON.Прочитать(ИмяФайлаНастроек);
	
	Параметры = Новый Массив;
	Параметры.Добавить(СтрокаJSON.ПолучитьТекст());
	Утверждения.ПроверитьМетодВыполнился(ОбработкаОбъект, "асПрочитатьJSON", Параметры, "Не удалось прочитать файл с настройками!");
	
	мНастройки = ОбработкаОбъект.асПрочитатьJSON(СтрокаJSON.ПолучитьТекст());
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	//Если ТранзакцияАктивна() Тогда
	//    ОтменитьТранзакцию();
	//КонецЕсли;
КонецПроцедуры

// Пример написания тестов
//
//Процедура ТестДолжен_СложитьДваИДва() Экспорт
//    Утверждения.ПроверитьРавенство(2 + 2, 4, "2 + 2, 4");
//КонецПроцедуры

Процедура ТестДолжен_ПроверитьЭкспортныеПеременные() Экспорт
	
	Ожидаем.Что(ОбработкаОбъект.ЗагруженныеДанные).ИмеетТип("Соответствие");
	//Утверждения.ПроверитьВхождение(ОбработкаОбъект.мКонвертерTextileToHTML, ".js", "У файла конвертера Textile в HTML некорректное расширение (!'.js')");
	//Утверждения.Проверить(ОбработкаОбъект.мHTTPСоединение, "Не найдено переменная мHTTPСоединение")
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНастройкиПодключения() Экспорт
	
	Ожидаем.Что(мНастройки).Существует().ИмеетТип("Структура");
	Ожидаем.Что(мНастройки.Свойство("НастройкиПодключенияКТрекеру")).ЭтоИстина();
	Ожидаем.Что(мНастройки.НастройкиПодключенияКТрекеру).ИмеетТип("Структура");
	
	Для Каждого Настройка Из мНастройки.НастройкиПодключенияКТрекеру Цикл
		Утверждения.ПроверитьЗаполненность(Настройка.Значение, "Не заполнено значение настройки " + Настройка.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТестДолжен_ЗаполнитьНастройкиПодключенияКТрекеруТестовымиЗначениями() Экспорт
	
	// Заполняем настройки подключения Обработки
	// Обработка должна содержать реквизиты с одноименным названием настройки
	ЗаполнитьНастройкиПодключения();
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПодключения()
	
	Перем Настройка;
	
	Для Каждого Настройка Из мНастройки.НастройкиПодключенияКТрекеру Цикл
		ОбработкаОбъект[Настройка.Ключ] = Настройка.Значение;
	КонецЦикла;

КонецПроцедуры

Процедура ТестДолжен_ПройтиИнициализациюПараметровОбработки() Экспорт
	Перем ОтчетОВыполнении;
	
	ЗаполнитьНастройкиПодключения();
	
	ОбработкаОбъект.Инициализация();
	
	ОтчетОВыполнении = ОбработкаОбъект.ОтчетОВыполнении;
	Ожидаем.Что(ОтчетОВыполнении).ИмеетТип("Структура");
	Ожидаем.Что(ОтчетОВыполнении.Свойство("ЕстьОшибки")).ЭтоИстина();
	Ожидаем.Что(ОтчетОВыполнении.Свойство("ТекстОшибки")).ЭтоИстина();
	Ожидаем.Что(ОтчетОВыполнении.Свойство("КодСостояния")).ЭтоИстина();
	
	Утверждения.ПроверитьЛожь(ОтчетОВыполнении.ЕстьОшибки, "Не удалось выполнить инициализацию параметров, " + Символы.ПС + ОтчетОВыполнении.КодСостояния + ": " + ОтчетОВыполнении.ТекстОшибки);
	
	Утверждения.ПроверитьБольше(ОбработкаОбъект.ЗагруженныеДанные.Количество(),                                                   0, "Количество загруженных данных с трекера равно 0!");
	Утверждения.ПроверитьБольше(ОбработкаОбъект.ЗагруженныеДанные["trackers"].trackers.Количество(),                              0, "Ожидается, хотябы один вид ""трекера"" для задач! Добавление из панели ""Администрирование/Трекеры""");
	Утверждения.ПроверитьБольше(ОбработкаОбъект.ЗагруженныеДанные["issue_statuses"].issue_statuses.Количество(),                  0, "Ожидается, хотябы один вид ""статуса"" для задач! Добавление из панели ""Администрирование/Статусы задач""");
	Утверждения.ПроверитьБольше(ОбработкаОбъект.ЗагруженныеДанные["issue_priorities"].issue_priorities.Количество(),              0, "Ожидается, хотябы один вид ""приоритета"" для задач! Добавление из панели ""Администрирование/Списки значений""");
	Утверждения.ПроверитьБольше(ОбработкаОбъект.ЗагруженныеДанные["time_entry_activities"].time_entry_activities.Количество(),    0, "Ожидается, хотябы один вид ""приоритета"" для задач! Добавление из панели ""Администрирование/Списки значений""");
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьИзТрекераСписокНастраиваемыхПолей() Экспорт
	
	ЗаполнитьНастройкиПодключения();
	
	Данные = ОбработкаОбъект.ПолучитьСписокНастраиваемыхПолейИзТрекера();
	
	Утверждения.ПроверитьЛожь(ОбработкаОбъект.ОтчетОВыполнении.ЕстьОшибки, ОбработкаОбъект.ОтчетОВыполнении.ТекстОшибки);
	
	Ожидаем.Что(Данные).Существует().ИмеетТип("Массив");

КонецПроцедуры

Процедура ТестДолжен_ПолучитьИзТрекераСписокПроектов() Экспорт
	
	ЗаполнитьНастройкиПодключения();
	
	Данные = ОбработкаОбъект.ПолучитьСписокПроектовИзТрекера();
	
	Утверждения.ПроверитьЛожь(ОбработкаОбъект.ОтчетОВыполнении.ЕстьОшибки, ОбработкаОбъект.ОтчетОВыполнении.ТекстОшибки);
	
	Ожидаем.Что(Данные).Существует().ИмеетТип("Массив");
	
	Утверждения.ПроверитьБольше(Данные.Количество(), 0, "Список полученных проектов с трекера пуст! Ожидается как минимм один проект в трекере");

КонецПроцедуры

Процедура ТестДолжен_ПолучитьИзТрекераСписокИсполнителей() Экспорт
	
	ЗаполнитьНастройкиПодключения();
	
	ОбработкаОбъект.Инициализация();
	
	Проекты = ОбработкаОбъект.ПолучитьДанныеРесурсаИзТрекера("projects")["projects"];
	
	Проект = ПроверитьЭлементМассиваПоЗначениюПоля(1, "status", Проекты);
	
	Данные = ОбработкаОбъект.ПолучитьСписокИсполнителейПроектаИзТрекера(Проект["name"]);
	
	Утверждения.ПроверитьЛожь(ОбработкаОбъект.ОтчетОВыполнении.ЕстьОшибки, ОбработкаОбъект.ОтчетОВыполнении.ТекстОшибки);
	
	Ожидаем.Что(Данные).Существует().ИмеетТип("Массив");

КонецПроцедуры


Процедура ТестДолжен_СоздатьЗадачуВТрекере() Экспорт
	
	ЗаполнитьНастройкиПодключения();
	
	ОбработкаОбъект.Инициализация();
	
	Проекты = ОбработкаОбъект.ПолучитьДанныеРесурсаИзТрекера("projects")["projects"];
	
	Проект = ПроверитьЭлементМассиваПоЗначениюПоля(1, "status", Проекты);
	
	ЗагруженныеДанные = ОбработкаОбъект.ЗагруженныеДанные;
	
	ОбработкаОбъект.ЗадачаПроект = Проект["name"];  //Сообщить("Проект: " + ОбработкаОбъект.ЗадачаПроект);
	ОбработкаОбъект.ЗадачаТрекер = ЗагруженныеДанные["trackers"].trackers[0].name;	
	ОбработкаОбъект.ЗадачаСтатус = ЗагруженныеДанные["issue_statuses"].issue_statuses[0].name;	
	ОбработкаОбъект.ЗадачаПриоритет = ЗагруженныеДанные["issue_priorities"].issue_priorities[0].name;
	ОбработкаОбъект.ЗадачаТема = Метаданные().Синоним;
	
	ОбработкаОбъект.СоздатьЗадачуВТрекере();
	
	Утверждения.ПроверитьЛожь(ОбработкаОбъект.ОтчетОВыполнении.ЕстьОшибки, "Не удалось создать задачу в трекере!" + Символы.ПС + ОбработкаОбъект.ОтчетОВыполнении.ТекстОшибки);
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьСписокЗадач() Экспорт
	
	ЗаполнитьНастройкиПодключения();
	
	Проекты = ОбработкаОбъект.ПолучитьДанныеРесурсаИзТрекера("projects")["projects"];
	Проект = ПроверитьЭлементМассиваПоЗначениюПоля(1, "status", Проекты);
	
	Форма = ОбработкаОбъект.ПолучитьФорму("Форма");
	Форма.ЭлементыФормы.Проект.Значение = Проект.name;
	
	Отборы = ОбработкаОбъект.СформироватьПараметрыЗапросаПолученияДанныхСТрекера(Форма.ЭлементыФормы);
	
	ИдентификаторПроекта = ОбработкаОбъект.ПолучитьИдентификаторПараметра(Проект.name, "projects");
	
	Утверждения.ПроверитьВхождение(Отборы, "project_id="+ИдентификаторПроекта, "Отбор по проекту установлен некорректно!");
	
	Данные = ОбработкаОбъект.ПолучитьДанныеРесурсаИзТрекера("issues", Отборы);
	
	Утверждения.ПроверитьЛожь(ОбработкаОбъект.ОтчетОВыполнении.ЕстьОшибки, "Не удалось получить список задач из трекера!" + Символы.ПС + ОбработкаОбъект.ОтчетОВыполнении.ТекстОшибки);
	
	Ожидаем.Что(Данные).ИмеетТип("Структура");
	Ожидаем.Что(Данные.Свойство("issues")).ЭтоИстина();
	Утверждения.ПроверитьБольше(Данные["issues"].Количество(), 0, "Ожидаем что как миниму есть одна задача, созданная нами, предыдущим тестом");
	
	ПроверитьЭлементМассиваПоЗначениюПоля(Метаданные().Синоним, "subject", Данные["issues"])
	
КонецПроцедуры

Функция ПроверитьЭлементМассиваПоЗначениюПоля(ИскомоеЗначение, ИмяПоляЭлемента, Массив)
	ПолеНайдено = Ложь;
	Для Каждого ЭлМассива Из Массив Цикл
		Если ЭлМассива[ИмяПоляЭлемента] = ИскомоеЗначение Тогда
			ПолеНайдено = Истина;
			Если ЭлМассива.Свойство("id") Тогда
				Возврат ЭлМассива;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПолеНайдено Тогда
		ВызватьИсключение "Не удалось найти значение - " + ИскомоеЗначение + " в массиве данных";
	КонецЕсли;	
КонецФункции

Процедура ТестДолжен_УдалитьЗадачуИзТрекера() Экспорт
	
	ЗаполнитьНастройкиПодключения();
	
	Проекты = ОбработкаОбъект.ПолучитьДанныеРесурсаИзТрекера("projects")["projects"];
	Проект = ПроверитьЭлементМассиваПоЗначениюПоля(1, "status", Проекты);
	
	Форма = ОбработкаОбъект.ПолучитьФорму("Форма");
	Форма.ЭлементыФормы.Проект.Значение = Проект.name;
	Форма.ЭлементыФормы.Тема.Значение = Метаданные().Синоним;
	
	Отборы = ОбработкаОбъект.СформироватьПараметрыЗапросаПолученияДанныхСТрекера(Форма.ЭлементыФормы);
	мЗадач = ОбработкаОбъект.ПолучитьДанныеРесурсаИзТрекера("issues", Отборы)["issues"];
	
	НомерЗадачи = ПроверитьЭлементМассиваПоЗначениюПоля(Метаданные().Синоним, "subject", мЗадач).id;
	
	ОбработкаОбъект.УдалитьЗадачуИзТрекера(НомерЗадачи);
	Утверждения.ПроверитьЛожь(ОбработкаОбъект.ОтчетОВыполнении.ЕстьОшибки, "Не удалось удалить задачу из трекера!" + Символы.ПС + ОбработкаОбъект.ОтчетОВыполнении.ТекстОшибки);
	
КонецПроцедуры

//}